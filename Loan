pragma solidity ^0.8.0;

contract LoanContract {
    struct Loan {
        uint256 amount;
        uint256 interestRate;
        address lender;
        address borrower;
        bool isRepaid;
    }
    
    Loan[] public loans;
    
    function createLoan(uint256 _amount, uint256 _interestRate) public {
        loans.push(Loan({
            amount: _amount,
            interestRate: _interestRate,
            lender: msg.sender,
            borrower: address(0),
            isRepaid: false
        }));
    }
    
    function requestLoan(uint256 _loanId) public payable {
        Loan storage loan = loans[_loanId];
        require(msg.value == loan.amount, "Incorrect amount");
        loan.borrower = msg.sender;
    }
    
    function repayLoan(uint256 _loanId) public payable {
        Loan storage loan = loans[_loanId];
        require(msg.sender == loan.borrower, "Only borrower can repay");
        require(msg.value == loan.amount + (loan.amount * loan.interestRate / 100), "Incorrect repayment amount");
        loan.isRepaid = true;
        payable(loan.lender).transfer(msg.value);
    }
}
